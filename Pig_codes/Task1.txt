Task A:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCode: int, Hobby: chararray);
filteredUsers = FILTER FaceInPage BY Nationality == 'United States of America';
report = FOREACH filteredUsers GENERATE Name, Hobby;
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskA;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskA' USING PigStorage(',');


Task B:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCode: int, Hobby: chararray);
accessLogs = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/AccessLogs.csv' USING PigStorage(',') AS (Acc_ID: int, ByWho: int, WhatPage: int, TypeOfAccess: chararray, AccessTime: chararray);
accessCounts = foreach (GROUP accessLogs BY WhatPage) {
    pageID = group;
    accessCount = COUNT(accessLogs);
    GENERATE pageID AS ID, accessCount AS count;
}
joinedData = JOIN FaceInPage BY ID, accessCounts BY ID;
sortedData = ORDER joinedData BY accessCounts::count DESC;
top10Pages = LIMIT sortedData 10;
report = FOREACH top10Pages GENERATE FaceInPage::ID AS ID, FaceInPage::Name AS Name, FaceInPage::Nationality AS Nationality;
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskB;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskB' USING PigStorage(',');


Task C:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCode: int, Hobby: chararray);
report = FOREACH (GROUP FaceInPage BY Nationality) {
    Nationality = group;
    citizenCount = COUNT(FaceInPage);
    GENERATE Nationality as Nationality:chararray, citizenCount as citizenCount:int;
}
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskC;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskC' USING PigStorage(',');


Task D:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCodeCode: chararray, Hobby: chararray);
associates = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/Associates.csv' USING PigStorage(',') AS (Rel_ID: int, PersonA_ID: int, PersonB_ID: int, DateOfRelation: chararray, Description: chararray);
combinedIDsOne = FOREACH associates GENERATE PersonA_ID AS ID;
combinedIDsTwo =FOREACH associates GENERATE PersonB_ID AS ID;
combinedIDs = UNION combinedIDsOne,combinedIDsTwo;
ownerRelationshipCounts = FOREACH (GROUP combinedIDs BY ID) {
    ID = group;
    relationshipCount = COUNT(combinedIDs);
    GENERATE ID as ID:int, relationshipCount as relationshipCount:int;
}
result = JOIN FaceInPage BY ID LEFT OUTER, ownerRelationshipCounts BY ID;
report = FOREACH result GENERATE FaceInPage::Name AS OwnerName, (ownerRelationshipCounts::relationshipCount is not null ? ownerRelationshipCounts::relationshipCount : 0) AS HappinessFactor;
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskD;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskD' USING PigStorage(',');


Task E:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCode: int, Hobby: chararray);
accessLogs = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/AccessLogs.csv' USING PigStorage(',') AS (Acc_ID: int, ByWho: int, WhatPage: int, TypeOfAccess: chararray, AccessTime: chararray);
accessCounts = FOREACH (GROUP accessLogs BY ByWho) {
    ByWho = group;
    totalAccesses = COUNT(accessLogs);
    distinctPagesAccessed = DISTINCT accessLogs.WhatPage;
    totalDistinctPagesAccessed = COUNT(distinctPagesAccessed);
    GENERATE ByWho AS ID:int, totalAccesses AS TotalAccesses:int, totalDistinctPagesAccessed AS DistinctPagesAccessed:int;
}
result = JOIN FaceInPage BY ID LEFT OUTER, accessCounts BY ID;
report = FOREACH result GENERATE FaceInPage::Name AS OwnerName, (accessCounts::TotalAccesses is not null ? accessCounts::TotalAccesses : 0) AS TotalAccesses, (accessCounts::DistinctPagesAccessed is not null ? accessCounts::DistinctPagesAccessed : 0) AS DistinctPagesAccessed;
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskE;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskE' USING PigStorage(',');


Task F:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCode: int, Hobby: chararray);
Associates = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/Associates.csv' USING PigStorage(',') AS (Rel_ID: int, PersonA_ID: int, PersonB_ID: int, DateOfRelation: chararray, Description: chararray);
AccessLogs = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/AccessLogs.csv' USING PigStorage(',') AS (Acc_ID: int, ByWho: int, WhatPage: int, TypeOfAccess: chararray, AccessTime: chararray);
FaceInPage = FOREACH FaceInPage GENERATE ID, Name;
NormalAssociates = FOREACH Associates GENERATE PersonA_ID AS ID, PersonB_ID AS FriendID;
ReversedAssociates = FOREACH Associates GENERATE PersonB_ID AS ID, PersonA_ID AS FriendID;
AllAssociates = UNION NormalAssociates, ReversedAssociates;
AccessedFriends = JOIN AllAssociates BY ID, AccessLogs BY ByWho;
checkPage = FOREACH AccessedFriends GENERATE AllAssociates::ID AS ID,AllAssociates::FriendID AS FriendID, (AllAssociates::FriendID == AccessLogs::WhatPage ? 1 : 0) AS is_equal;
checkPage = FILTER checkPage by is_equal == 1;
checkPage = DISTINCT checkPage;
join_with_base = JOIN AllAssociates BY (ID,FriendID) LEFT OUTER, checkPage BY (ID,FriendID);
join_with_base_distinct = FILTER join_with_base BY checkPage::ID IS NULL;
result = FOREACH join_with_base_distinct GENERATE AllAssociates::ID AS ID, AllAssociates::FriendID AS FriendID;
JoinedData = JOIN result BY FriendID, FaceInPage BY ID;
JoinedDataUpdated = FOREACH JoinedData GENERATE result::ID AS ID, result::FriendID AS FriendID, FaceInPage::Name AS FriendName;
JoinedDataTwo = Join JoinedDataUpdated BY ID, FaceInPage BY ID;
report = FOREACH JoinedDataTwo GENERATE JoinedDataUpdated::ID AS ID, FaceInPage::Name AS Name, JoinedDataUpdated::FriendID AS FriendID, JoinedDataUpdated::FriendName AS FriendName;
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskF;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskF' USING PigStorage(',');


Task G:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCode: chararray, Hobby: chararray);
accessLogs = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/AccessLogs.csv' USING PigStorage(',') AS (Acc_ID: int, ByWho: chararray, WhatPage: int, TypeOfAccess: chararray, AccessTime: chararray);
latest_accessed = FOREACH (GROUP accessLogs BY WhatPage) {
    WhatPage = group;
    latest_accessed_date = MAX(accessLogs.AccessTime);
    GENERATE WhatPage as ID:int, latest_accessed_date as latest_date:int;
}
filtered_access = FILTER latest_accessed BY latest_date >= 870400;
result = JOIN filtered_access by ID, FaceInPage by ID;
report = FOREACH result GENERATE FaceInPage::ID AS ID, FaceInPage::Name AS Name;
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskG;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskG' USING PigStorage(',');


Task H:
FaceInPage = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/FaceInPage.csv' USING PigStorage(',') AS (ID: int, Name: chararray, Nationality: chararray, CountryCode: int, Hobby: chararray);
associates = LOAD 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Input/full_scale_files/Associates.csv' USING PigStorage(',') AS (Rel_ID: int, PersonA_ID: int, PersonB_ID: int, DateOfRelation: chararray, Description: chararray);
combinedIDsOne = FOREACH associates GENERATE PersonA_ID AS OwnerID;
combinedIDsTwo =FOREACH associates GENERATE PersonB_ID AS OwnerID;
combinedIDs = UNION combinedIDsOne,combinedIDsTwo;
ownerRelationshipCounts = FOREACH (GROUP combinedIDs BY OwnerID) {
    ownerID = group;
    relationshipCount = COUNT(combinedIDs);
    GENERATE ownerID as ownerID:int, relationshipCount as relationshipCount:int;
}
relationshipCounts = FOREACH (GROUP ownerRelationshipCounts ALL) GENERATE SUM(ownerRelationshipCounts.relationshipCount) AS totalRelationships:long, COUNT(ownerRelationshipCounts) AS numOwners:long, ((double)SUM(ownerRelationshipCounts.relationshipCount) / (double)COUNT(ownerRelationshipCounts)) AS averageRelationships;
popularOwners = FILTER ownerRelationshipCounts BY relationshipCount > (long)relationshipCounts.averageRelationships;
result = JOIN popularOwners BY ownerID, FaceInPage BY ID;
report = FOREACH result GENERATE FaceInPage::ID AS ID, FaceInPage::Name AS Name, popularOwners::relationshipCount AS RelationshipCount;
fs -rm -f -r -R C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskH;
STORE report INTO 'C:/CourseWork/BigDataManagement/Projects/Assignment2/Output/TaskH' USING PigStorage(',');
